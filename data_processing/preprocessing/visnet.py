import numpy as np
from os import path
from scipy.stats import entropy


PROCESS_VERSION = 6

SEGMENT_SIZE = 128
SEGMENTS = 1024

def bytes_to_histogram(x):
  hist = {}
  for i in x:
    hist[i] = hist.get(i, 0) + 1
  RESULT = np.asarray([ v for _, v in sorted(hist.items())])
  RESULT = (RESULT - RESULT.min())/ (RESULT.max() - RESULT.min()+0.00000001)
  return RESULT

def bytes_to_entropy(x):
  ent = []
  x = x[np.logical_not(np.isnan(x))]
  for i in range(0,SEGMENTS):
    ent.append(entropy(x[i:i+int(len(x)/SEGMENTS)]))
  x = np.asarray(ent, dtype=np.float64)
  x = x[np.logical_not(np.isnan(x))]
  return x

def file_to_bytes(x):
  bytes = []
  for j in x:
    for i in range(0, len(j) - 1, 2):
      try:
        hex = int(j[i:i+2],16)
        bytes.append(hex)
      except ValueError:
        continue
  x = np.asarray(bytes, dtype = np.float64)
  return x

def file_to_np(file):
    x = (file.read()).replace("\n",'').split(' ')
    x = file_to_bytes(x)
    histogram = bytes_to_histogram(x)
    entropy = bytes_to_entropy(x)
    std_dev = np.asarray(np.std(entropy)).reshape(1,)
    mean = np.asarray(np.mean(entropy)).reshape(1,)
    return np.concatenate((histogram, entropy, std_dev, mean))

def preprocess(file_name:str, origin_folder:str, dest_folder:str):
    bytes_path = f"{origin_folder}/{file_name}.bytes"
    pros_path = f"{dest_folder}/{PROCESS_VERSION}/{file_name}.npy"
    if not path.exists(pros_path):    
        f = open(bytes_path, "r", encoding = 'ASCII', errors='ignore')
        output = file_to_np(f)
        np.save(pros_path,output)
    else:
        output = np.load(pros_path)
    return output