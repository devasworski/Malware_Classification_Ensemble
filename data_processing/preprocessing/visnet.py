import numpy as np
from os import remove, path
from cv2 import resize, INTER_AREA, cvtColor, COLOR_RGB2GRAY
from scipy.stats import entropy
import matplotlib.pyplot as plt
from matplotlib import use as plt_use
plt_use('agg')

PROCESS_VERSION = 1

def entropy_to_np(x):
  fig = plt.figure(dpi=500)
  plt.plot(x)
  plt.axis('off')
  fig.canvas.draw()
  x = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8)
  x  = x.reshape(fig.canvas.get_width_height()[::-1] + (3,))
  plt.close(fig)
  h, w, d = x.shape
  border_h = 363
  border_w = 415
  x = x[border_h:h-border_h+30,border_w+80:w-border_w,:]
  x = cvtColor(x,COLOR_RGB2GRAY)
  x = resize(x, (256, 256), interpolation=INTER_AREA)
  return x

def bytes_to_entropy(x):
  ent = []
  segment_len = int(len(x)/1024)
  for i in range(0,1024): 
    ent.append(entropy(x[i:i+segment_len]))
  return ent

def file_to_bytes(x):
  bytes = []
  for j in x:
    for i in range(0, len(j) - 1, 2):
      try:
        hex = int(j[i:i+2],16)
        bytes.append(hex)
      except ValueError:
        continue
  x = np.asarray(bytes)
  return x

def file_to_np(file):
    x = (file.read()).replace("\n",'').split(' ')
    x = file_to_bytes(x)
    x = bytes_to_entropy(x)
    x = entropy_to_np(x)
    return x

def preprocess(file_name:str, origin_folder:str, dest_folder:str):
    bytes_path = f"{origin_folder}/{file_name}.bytes"
    pros_path = f"{dest_folder}/{PROCESS_VERSION}/{file_name}.npy"
    if not path.exists(pros_path):    
        f = open(bytes_path, "r", encoding = 'ASCII', errors='ignore')
        output = file_to_np(f)
        np.save(pros_path,output)
    else:
        output = np.load(pros_path)
    return output