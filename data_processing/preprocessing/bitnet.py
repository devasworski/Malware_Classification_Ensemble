import numpy as np
import scipy.interpolate as interp
import os

PROCESS_VERSION = 1

def compress(x):
  x_interp = interp.interp1d(np.arange(x.size),x)
  x = x_interp(np.linspace(0,x.size-1,2304))
  return x

def bytes_to_bits(x):
  bytes = []
  for j in x:
    for i in range(0, len(j) - 1, 2):
      try:
        hex = int(j[i:i+2],16)
        bytes.append(hex)
      except ValueError:
        continue
  x = np.asarray(bytes)
  x = compress(x)
  x = [format(int(i), "08b") for i in x]
  x = np.asarray([i for l in x for i in l], dtype='float64')
  return x

def bytes_to_np(file):
    x = (file.read()).replace("\n",'').split(' ')
    RESULT = bytes_to_bits(x)
    return RESULT

def preprocess(file_name:str, origin_folder:str, dest_folder:str):
    bytes_path = f"{origin_folder}/{file_name}.bytes"
    pros_path = f"{dest_folder}/{PROCESS_VERSION}/{file_name}.npy"
    if not os.path.exists(pros_path):    
        f = open(bytes_path, "r", encoding = 'unicode_escape', errors='ignore')
        output = bytes_to_np(f)
        np.save(pros_path,output)
    else:
        output = np.load(pros_path)
    return output