from matplotlib.pyplot import subplots, get_cmap, rcParams
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
from keras.utils.vis_utils import plot_model
from numpy import argmax, asarray
from pandas import DataFrame
from mlflow import log_artifact, log_figure

def plot_confusion_matrix(model,test_generator, titel, folder):
    """
    It takes the model, the test generator, the title of the plot and the folder where the confusion matrix should
    be saved. It then plots the confusion matrix and saves it.
    
    :param model: the model to be evaluated
    :param test_generator: The test data generator
    :param titel: The title of the confusion matrix
    :param folder: The folder where the images are stored
    """
    title = titel
    labels = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak']
    pred = model.predict(test_generator)
    df = DataFrame(index = asarray(test_generator.image_filenames).transpose())
    df['pred_label'] = argmax(pred, axis=1).transpose()
    df['true_label'] = argmax(test_generator.labels, axis=1).transpose()
    df['correct'] = df.apply(lambda row: 1 if row.pred_label == row.true_label else 0, axis=1)
    df.to_csv(f'{folder}/predictions.csv')
    log_artifact(local_path = f'{folder}/predictions.csv')
    confusion_matrix_ = confusion_matrix(argmax(test_generator.labels, axis=1),argmax(pred, axis=1),normalize='true')
    confusionMatrixDisplay = ConfusionMatrixDisplay(confusion_matrix_, display_labels=labels)
    _, ax = subplots(figsize=(20,20))
    label_font = {'size':'18'}
    rcParams.update({'font.size': 14})
    ax.set_xlabel('Predicted labels', fontdict=label_font)
    ax.set_ylabel('Observed labels', fontdict=label_font)
    ax.set_title('Confusion Matrix '+title, fontdict={'size':'22'})
    ax.tick_params(axis='both', which='major', labelsize=14)
    cmD= confusionMatrixDisplay.plot(ax=ax,cmap = get_cmap('Blues'), xticks_rotation='vertical')
    log_figure(cmD.figure_, "confusion_matrix.png")

def plot_confusion_matrix_with_aux(model,test_generator, titel, folder):
    title = titel
    labels = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak']
    pred = model.predict(test_generator)
    df = DataFrame(index = asarray(test_generator.image_filenames).transpose())
    df['pred_label'] = argmax(pred[0], axis=1).transpose()
    df['true_label'] = argmax(test_generator.labels, axis=1).transpose()
    df['correct'] = df.apply(lambda row: 1 if row.pred_label == row.true_label else 0, axis=1)
    df.to_csv(f'{folder}/predictions.csv')
    log_artifact(local_path = f'{folder}/predictions.csv')
    confusion_matrix_ = confusion_matrix(argmax(test_generator.labels, axis=1),argmax(pred[0], axis=1),normalize='true')
    confusionMatrixDisplay = ConfusionMatrixDisplay(confusion_matrix_, display_labels=labels)
    fig, ax = subplots(figsize=(20,20))
    label_font = {'size':'18'}
    rcParams.update({'font.size': 14})
    ax.set_xlabel('Predicted labels', fontdict=label_font)
    ax.set_ylabel('Observed labels', fontdict=label_font)
    ax.set_title('Confusion Matrix '+title, fontdict={'size':'22'})
    ax.tick_params(axis='both', which='major', labelsize=14)
    cmD= confusionMatrixDisplay.plot(ax=ax,cmap = get_cmap('Blues'), xticks_rotation='vertical')
    log_figure(cmD.figure_, "confusion_matrix.png")

def summary(model, folder): 
    """
    It takes a model and a name as input, and then writes the model summary to a text file, and then
    logs the text file as an artifact. It also plots the model and logs the plot as an artifact.
    
    :param model: The model to be summarized
    :param name: The name of the model
    """
    with open(f'{folder}/model_summary.txt','w') as f:
        model.summary(print_fn=lambda x: f.write(x + '\n'),show_trainable=True)
    log_artifact(local_path = f'{folder}/model_summary.txt')
    plot_model(model, show_shapes=True, to_file=f'{folder}/Model_Plot.png')
    log_artifact(local_path = f'{folder}/Model_Plot.png')