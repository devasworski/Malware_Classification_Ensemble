from tensorflow.keras.utils import Sequence
from sys import path as syspath
from os import path as ospath
syspath.append(ospath.realpath('..'))
from data_processing.preprocessing import bitnet, malvecnet
import numpy as np
import pandas as pd

def get_classweight(dataset): 
  ospath.realpath(f'../data/splits/{dataset}/y_train.npy')
  y_train_data = np.load(f'../data/splits/{dataset}/y_train.npy')
  df = pd.DataFrame(np.argmax(y_train_data,axis=1), columns=['lables'])
  F1, F2, F3, F4, F5, F6, F7, F8, F9 = [(1/len(x)) for _, x in df.groupby(df['lables'])]
  return {0:F1, 1:F2, 2: F3, 3:F4, 4:F5, 5:F6, 6:F7, 7:F8, 8:F9}

def __load_presplitt__(dataset,name:str):
  ids = np.load(f'../data/splits/{dataset}/x_{name}.npy', allow_pickle=True)
  labels = np.load(f'../data/splits/{dataset}/y_{name}.npy', allow_pickle=True)
  return ids, labels

class BitNet_Generator(Sequence):
  def __init__(self, batch_size, folder, dataset):
    image_filenames, labels = __load_presplitt__(dataset,folder)
    self.image_filenames = image_filenames
    self.labels = labels
    self.batch_size = batch_size
    self.folder = folder
  
  def __len__(self) :
    return (np.ceil(len(self.image_filenames) / float(self.batch_size))).astype(int)

  def __getitem__(self, idx) :
    batch_x = self.image_filenames[idx * self.batch_size : (idx+1) * self.batch_size]
    batch_y = self.labels[idx * self.batch_size : (idx+1) * self.batch_size]
    return np.array([np.asarray(bitnet.preprocess(file_name,origin_folder='../data/BIG_2015/train',dest_folder='../data/BitNet'),dtype='float64') for file_name in batch_x]).reshape(-1,18432,1), np.array(batch_y)

  def sample_size(self):
    return len(self.image_filenames)

class MalVecNet_Generator(Sequence):
  def __init__(self, batch_size, folder, dataset):
    image_filenames, labels = __load_presplitt__(dataset,folder)
    self.image_filenames = image_filenames
    self.labels = labels
    self.batch_size = batch_size
    self.folder = folder
  
  def __len__(self) :
    return (np.ceil(len(self.image_filenames) / float(self.batch_size))).astype(int)

  def __getitem__(self, idx) :
    batch_x = self.image_filenames[idx * self.batch_size : (idx+1) * self.batch_size]
    batch_y = self.labels[idx * self.batch_size : (idx+1) * self.batch_size]
    return np.array([np.asarray(malvecnet.preprocess(file_name,origin_folder='../data/BIG_2015/train',dest_folder='../data/MalVecNet')) for file_name in batch_x]).reshape(-1,3200, 8,1), np.array(batch_y)

  def sample_size(self):
    return len(self.image_filenames)