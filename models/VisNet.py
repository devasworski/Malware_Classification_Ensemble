from tensorflow.keras.callbacks import ModelCheckpoint
from keras.models import Model
from keras.layers import Input, Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from keras.regularizers import l1_l2
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
from keras.utils.vis_utils import plot_model
from keras.callbacks import Callback
import numpy as np
import pandas as pd
from os import makedirs
from dotenv import load_dotenv
from DataGenerator import VisNet_Generator, get_classweight
import mlflow
from mlflow.models.signature import infer_signature
from shutil import rmtree


# Params for MLflow
load_dotenv()

Model_Name = 'VisNet.py'
EPOCHS = 400 #@param 
LEARNING_RATE = 0.000007 #@param {type:"number"}
BATCH_SIZE =  200#@param 
DATASET = "raw" #@param ["raw", "YongImage", "Upsampled"]
WEIGHT_DECAY_L1 =  0.0000001#@param
WEIGHT_DECAY_L2 =  0.0000001#@param
DROPOUT = 0.2 #@param

makedirs('.VisNet', exist_ok = True)

class_weight = get_classweight(DATASET)
train_generator = VisNet_Generator(BATCH_SIZE, 'train', DATASET)
val_generator = VisNet_Generator(BATCH_SIZE, 'val', DATASET)
test_generator = VisNet_Generator(BATCH_SIZE, 'test', DATASET)

mlflow.set_experiment(Model_Name)
mlflow.start_run()
mlflow.log_artifact(local_path = 'VisNet.py')

mlflow.log_param('dataset',DATASET)
mlflow.log_param('Eager Execution',True)
mlflow.log_param('class_weight',class_weight)
mlflow.log_param('epochs',EPOCHS)
mlflow.log_param('batch_size',BATCH_SIZE)
mlflow.log_param('opt_learning_rate',LEARNING_RATE)
mlflow.log_param('opt_name','Adam')
mlflow.log_param('steps_per_epoch',int(train_generator.sample_size() // BATCH_SIZE))
mlflow.log_param('validation_steps',int(val_generator.sample_size() // BATCH_SIZE))
mlflow.log_param('weight_decay_L1',WEIGHT_DECAY_L1)
mlflow.log_param('weight_decay_L2',WEIGHT_DECAY_L2)
mlflow.log_param('dropout',DROPOUT)

def CheckpointCallback():
    return ModelCheckpoint(filepath=".VisNet/Checkpoint",verbose=1,save_weights_only=False,save_best_only=True)

class CustomCallback(Callback):
    def on_epoch_end(self, epoch, logs=None):
        mlflow.log_metrics(logs,epoch)

def VisNet_Model():
  input = Input(shape=(1282))
  x = Dense(1282, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(input)
  x = BatchNormalization()(x)
  x = Dropout(0.2)(x)
  x = Dense(1024, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(x)
  x = Dense(1024, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(x)
  x = BatchNormalization()(x)
  x = Dropout(0.2)(x)
  x = Dense(1024, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(x)
  x = Dense(1024, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(x)
  x = BatchNormalization()(x)
  x = Dropout(0.2)(x)
  x = Dense(1024, activation = None, kernel_regularizer=l1_l2(l1 = WEIGHT_DECAY_L1, l2 = WEIGHT_DECAY_L2))(x)
  x = BatchNormalization()(x)
  x = Dropout(0.2)(x)
  output = Dense(9, activation='softmax' , name="Vis_Output_Layer")(x)
  model = Model(inputs=input, outputs=output, name="Entropy_Model")
  model.compile(loss='categorical_crossentropy', optimizer = Adam(learning_rate = VisNet_LEARNING_RATE), metrics=['accuracy','Recall','Precision'], run_eagerly=True)
  return model
model = VisNet_Model()

with open('.VisNet/model_summary.txt','w') as f:
    model.summary(print_fn=lambda x: f.write(x + '\n'),show_trainable=True)
mlflow.log_artifact(local_path = '.VisNet/model_summary.txt')
plot_model(model, show_shapes=True, to_file=f'.VisNet/Model_Plot.png')
mlflow.log_artifact(local_path = '.VisNet/Model_Plot.png')

history = model.fit(train_generator, epochs = EPOCHS, verbose = 0, validation_data = val_generator, steps_per_epoch = int(train_generator.sample_size()  // BATCH_SIZE),validation_steps = int(val_generator.sample_size() // BATCH_SIZE), callbacks = [CheckpointCallback(), CustomCallback()], class_weight=class_weight)
mlflow.log_artifact(local_path = '.VisNet/Checkpoint', artifact_path='')

model.load_weights('.VisNet/Checkpoint')
train = train_generator.__getitem__(0)[0]
predictions = model.predict(train)
mlflow.keras.log_model(model,artifact_path='model',signature=infer_signature(train, predictions), registered_model_name=Model_Name)
score = model.evaluate(test_generator,verbose=1)
mlflow.log_metrics({"test_loss": score[0], "test_accuracy": score[1], "test_recall": score[2], "test_precision": score[3]},(EPOCHS-1))
print(f'Test Loss: {score[0]}, Test Accuracy: {score[1]*100}%, Test Recall: {score[2]*100}%, Test Precision: {score[3]*100}%')

def plot_confusion_matrix(model,test_generator):
    title = Model_Name
    labels = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak']
    pred = model.predict(test_generator)
    df = pd.DataFrame(index = np.asarray(test_generator.image_filenames).transpose())
    df['pred_label'] = np.argmax(pred, axis=1).transpose()
    df['true_label'] = np.argmax(test_generator.labels, axis=1).transpose()
    df['correct'] = df.apply(lambda row: 1 if row.pred_label == row.true_label else 0, axis=1)
    df.to_csv('.VisNet/predictions.csv')
    mlflow.log_artifact(local_path = '.VisNet/predictions.csv')
    confusion_matrix_ = confusion_matrix(np.argmax(test_generator.labels, axis=1),np.argmax(pred, axis=1),normalize='true')
    confusionMatrixDisplay = ConfusionMatrixDisplay(confusion_matrix_, display_labels=labels)
    fig, ax = plt.subplots(figsize=(20,20))
    label_font = {'size':'18'}
    plt.rcParams.update({'font.size': 14})
    ax.set_xlabel('Predicted labels', fontdict=label_font)
    ax.set_ylabel('Observed labels', fontdict=label_font)
    ax.set_title('Confusion Matrix '+title, fontdict={'size':'22'})
    ax.tick_params(axis='both', which='major', labelsize=14)
    cmD= confusionMatrixDisplay.plot(ax=ax,cmap = plt.get_cmap('Blues'), xticks_rotation='vertical')
    mlflow.log_figure(cmD.figure_, "confusion_matrix.png")

plot_confusion_matrix(model,test_generator)
mlflow.end_run()

rmtree('.VisNet/')