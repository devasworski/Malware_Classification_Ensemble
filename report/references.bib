
@article{baptista_binary_2018,
  title = {Binary Visualisation for Malware Detection},
  author = {Baptista, Irina},
  date = {2018},
  pages = {16},
  url = {http://hdl.handle.net/10026.1/14179},
  abstract = {It is becoming increasingly harder to protect devices against security threats; as malware is steadily evolving defence mechanisms are struggling to persevere. This study introduces a concept intended at supporting security systems using SelfOrganizing Incremental Neural Network (SOINN) and binary visualization. The system converts a file to its visual representation and sends the data for classification to SOINN. Tests were done to evaluate its performance and obtain an accuracy rate, which rounds the 80\% figures at the moment, and false positive and negative rates. Bytes prevalence were also analysed with malware samples having a higher amount of null bytes compared with software samples, which may be a result of hiding malicious data or functionality. The patterns created by the samples were examined; malware samples had more clustering and created different patterns across the images whereas software samples presented mostly static and constant images although exceptions were noted in both categories.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/Y5XM3JE8/Baptista - 2018 - Binary visualisation for malware detection.pdf}
}

@inproceedings{baptista_novel_2019,
  title = {A {{Novel Malware Detection System Based}} on {{Machine Learning}} and {{Binary Visualization}}},
  booktitle = {2019 {{IEEE International Conference}} on {{Communications Workshops}} ({{ICC Workshops}})},
  author = {Baptista, Irina and Shiaeles, Stavros and Kolokotronis, Nicholas},
  date = {2019-05},
  pages = {1--6},
  issn = {2474-9133},
  doi = {10.1109/ICCW.2019.8757060},
  abstract = {The continued evolution and diversity of malware constitutes a major threat in modern systems. It is well proven that security defenses currently available are ineffective to mitigate the skills and imagination of cyber-criminals necessitating the development of novel solutions. Deep learning algorithms and artificial intelligence (AI) are rapidly evolving with remarkable results in many application areas. Following the advances of AI and recognizing the need for efficient malware detection methods, this paper presents a new approach for malware detection based on binary visualization and self-organizing incremental neural networks. The proposed method's performance in detecting malicious payloads in various file types was investigated and the experimental results showed that a detection accuracy of 91.7\% and 94.1\% was achieved for ransomware in .pdf and .doc files respectively. With respect to other formats of malicious code and other file types, including binaries, the proposed method behaved well with an incremental detection rate that allows efficiently detecting unknown malware at real-time.},
  eventtitle = {2019 {{IEEE International Conference}} on {{Communications Workshops}} ({{ICC Workshops}})},
  keywords = {Data visualization,Feature extraction,Image color analysis,Machine learning,Malware,Neural networks,Payloads},
  file = {/Users/asworski/Documents/Zotero/storage/HPQLW24C/Baptista et al. - 2019 - A Novel Malware Detection System Based on Machine .pdf;/Users/asworski/Documents/Zotero/storage/ICUCH96A/8757060.html}
}

@inproceedings{barlow_novel_2020,
  title = {A {{Novel Approach}} to {{Detect Phishing Attacks}} Using {{Binary Visualisation}} and {{Machine Learning}}},
  booktitle = {2020 {{IEEE World Congress}} on {{Services}} ({{SERVICES}})},
  author = {Barlow, Luke and Bendiaby, Gueltoum and Shiaelesy, Stavros and Savage, Nick},
  date = {2020-10},
  eprint = {2108.13333},
  eprinttype = {arxiv},
  primaryclass = {cs},
  pages = {177--182},
  doi = {10.1109/SERVICES48979.2020.00046},
  url = {http://arxiv.org/abs/2108.13333},
  urldate = {2022-05-18},
  abstract = {Protecting and preventing sensitive data from being used inappropriately has become a challenging task. Even a small mistake in securing data can be exploited by phishing attacks to release private information such as passwords or financial information to a malicious actor. Phishing has now proven so successful; it is the number one attack vector. Many approaches have been proposed to protect against this type of cyber-attack, from additional staff training, enriched spam filters to large collaborative databases of known threats such as PhishTank and OpenPhish. However, they mostly rely upon a user falling victim to an attack and manually adding this new threat to the shared pool, which presents a constant disadvantage in the fightback against phishing. In this paper, we propose a novel approach to protect against phishing attacks using binary visualisation and machine learning. Unlike previous work in this field, our approach uses an automated detection process and requires no further user interaction, which allows a faster and more accurate detection process. The experiment results show that our approach has a high detection rate},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/Users/asworski/Documents/Zotero/storage/PALFI5QH/Barlow et al. - 2020 - A Novel Approach to Detect Phishing Attacks using .pdf;/Users/asworski/Documents/Zotero/storage/2M6IER7I/2108.html}
}

@inproceedings{bendiab_iot_2020,
  title = {{{IoT Malware Network Traffic Classification}} Using {{Visual Representation}} and {{Deep Learning}}},
  booktitle = {2020 6th {{IEEE Conference}} on {{Network Softwarization}} ({{NetSoft}})},
  author = {Bendiab, Gueltoum and Shiaeles, Stavros and Alruban, Abdulrahman and Kolokotronis, Nicholas},
  date = {2020-06},
  eprint = {2010.01712},
  eprinttype = {arxiv},
  primaryclass = {cs},
  pages = {444--449},
  doi = {10.1109/NetSoft48620.2020.9165381},
  url = {http://arxiv.org/abs/2010.01712},
  urldate = {2022-05-18},
  abstract = {With the increase of IoT devices and technologies coming into service, Malware has risen as a challenging threat with increased infection rates and levels of sophistication. Without strong security mechanisms, a huge amount of sensitive data is exposed to vulnerabilities, and therefore, easily abused by cybercriminals to perform several illegal activities. Thus, advanced network security mechanisms that are able of performing a real-time traffic analysis and mitigation of malicious traffic are required. To address this challenge, we are proposing a novel IoT malware traffic analysis approach using deep learning and visual representation for faster detection and classification of new malware (zero-day malware). The detection of malicious network traffic in the proposed approach works at the package level, significantly reducing the time of detection with promising results due to the deep learning technologies used. To evaluate our proposed method performance, a dataset is constructed which consists of 1000 pcap files of normal and malware traffic that are collected from different network traffic sources. The experimental results of Residual Neural Network (ResNet50) are very promising, providing a 94.50\% accuracy rate for detection of malware traffic.},
  archiveprefix = {arXiv},
  keywords = {C.2.3,Computer Science - Cryptography and Security,Computer Science - Machine Learning},
  file = {/Users/asworski/Documents/Zotero/storage/P95XQMFZ/Bendiab et al. - 2020 - IoT Malware Network Traffic Classification using V.pdf;/Users/asworski/Documents/Zotero/storage/AFTEAXL5/2010.html}
}

@online{brownlee_how_2018,
  title = {How to {{Develop}} a {{Multichannel CNN Model}} for {{Text Classification}}},
  author = {Brownlee, Jason},
  date = {2018-01-11T18:00:36+00:00},
  url = {https://machinelearningmastery.com/develop-n-gram-multichannel-convolutional-neural-network-sentiment-analysis/},
  urldate = {2022-05-27},
  abstract = {A standard deep learning model for text classification and sentiment analysis uses a word embedding layer and one-dimensional convolutional neural network. The model can be expanded by using multiple parallel convolutional neural networks that read the source document using different kernel sizes. This, in effect, creates a multichannel convolutional neural network for text that reads […]},
  langid = {american},
  organization = {{Machine Learning Mastery}},
  file = {/Users/asworski/Documents/Zotero/storage/DMV7SR42/develop-n-gram-multichannel-convolutional-neural-network-sentiment-analysis.html}
}

@inproceedings{cao_benign_2020,
  title = {On Benign Features in Malware Detection},
  booktitle = {Proceedings of the 35th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Cao, Michael and Badihi, Sahar and Ahmed, Khaled and Xiong, Peiyu and Rubin, Julia},
  date = {2020-12-21},
  pages = {1234--1238},
  publisher = {{ACM}},
  location = {{Virtual Event Australia}},
  doi = {10.1145/3324884.3418926},
  url = {https://dl.acm.org/doi/10.1145/3324884.3418926},
  urldate = {2022-08-09},
  abstract = {This paper investigates the problem of classifying Android applications into malicious and benign. We analyze the performance of a popular malware detection tool, Drebin, and show that its correct classification decisions often stem from using benign rather than malicious features for making predictions. That, effectively, turns the classifier into a benign app detector rather than a malware detector. While such behavior allows the classifier to achieve a high detection accuracy, it also makes it vulnerable to attacks, e.g., by a malicious app pretending to be benign by using features similar to those of benign apps. In this paper, we propose an approach for deprioritizing benign features in malware detection, focusing the detection on truly malicious portions of the apps. We show that our proposed approach makes a classifier more resilient to attacks while still allowing it to maintain a high detection accuracy.},
  eventtitle = {{{ASE}} '20: 35th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  isbn = {978-1-4503-6768-4},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/NTPZW4E7/Cao et al. - 2020 - On benign features in malware detection.pdf}
}

@online{garg_training_2019,
  title = {Training on {{Large Datasets That Don}}’t {{Fit In Memory}} in {{Keras}}},
  author = {Garg, Rajat},
  date = {2019-03-19T16:22:27},
  url = {https://medium.com/@mrgarg.rajat/training-on-large-datasets-that-dont-fit-in-memory-in-keras-60a974785d71},
  urldate = {2022-05-27},
  abstract = {Training your Deep Learning algorithms on a huge dataset that is too large to fit in memory? If yes, this article will be of great help to…},
  langid = {english},
  organization = {{Medium}},
  file = {/Users/asworski/Documents/Zotero/storage/UL4KBUQI/training-on-large-datasets-that-dont-fit-in-memory-in-keras-60a974785d71.html}
}

@incollection{gedeon_novel_2019,
  title = {A {{Novel Image-Based Malware Classification Model Using Deep Learning}}},
  booktitle = {Neural {{Information Processing}}},
  author = {Jiang, Yongkang and Li, Shenghong and Wu, Yue and Zou, Futai},
  editor = {Gedeon, Tom and Wong, Kok Wai and Lee, Minho},
  date = {2019},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {11954},
  pages = {150--161},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-36711-4_14},
  url = {http://link.springer.com/10.1007/978-3-030-36711-4_14},
  urldate = {2022-05-25},
  abstract = {Nowadays, the vast volume of data which needs to be evaluated potentially malicious is becoming one of the major challenges of antivirus products. In this paper, we propose a novel image-based malware classification model using deep learning to counter large-scale malware analysis. The model includes a malware embedding method called YongImage which maps instruction-level information and disassembly metadata generated by IDA disassembler tool into an image vector, and a deep neural network named malVecNet which has simpler structure and faster convergence rate.},
  isbn = {978-3-030-36710-7 978-3-030-36711-4},
  langid = {english},
  keywords = {Vector Model},
  file = {/Users/asworski/Documents/Zotero/storage/FKWHCC46/Jiang et al. - 2019 - A Novel Image-Based Malware Classification Model U.pdf}
}

@article{gibert_classification_2018,
  title = {Classification of {{Malware}} by {{Using Structural Entropy}} on {{Convolutional Neural Networks}}},
  author = {Gibert, Daniel and Mateu, Carles and Planes, Jordi and Vicens, Ramon},
  date = {2018-04-27},
  pages = {6},
  doi = {10.1609/aaai.v32i1.11409},
  abstract = {The number of malicious programs has grown both in number and in sophistication. Analyzing the malicious intent of vast amounts of data requires huge resources and thus, effective categorization of malware is required. In this paper, the content of a malicious program is represented as an entropy stream, where each value describes the amount of entropy of a small chunk of code in a specific location of the file. Wavelet transforms are then applied to this entropy signal to describe the variation in the entropic energy. Motivated by the visual similarity between streams of entropy of malicious software belonging to the same family, we propose a file agnostic deep learning approach for categorization of malware. Our method exploits the fact that most variants are generated by using common obfuscation techniques and that compression and encryption algorithms retain some properties present in the original code. This allows us to find discriminative patterns that almost all variants in a family share. Our method has been evaluated using the data provided by Microsoft for the BigData Innovators Gathering Anti-Malware Prediction Challenge, and achieved promising results in comparison with the State of the Art.},
  langid = {english},
  keywords = {Entropy Model},
  file = {/Users/asworski/Documents/Zotero/storage/AX3VE67B/Gibert et al. - Classification of Malware by Using Structural Entr.pdf}
}

@inproceedings{gibert_hierarchical_2019,
  title = {A {{Hierarchical Convolutional Neural Network}} for {{Malware Classification}}},
  booktitle = {2019 {{International Joint Conference}} on {{Neural Networks}} ({{IJCNN}})},
  author = {Gibert, Daniel and Mateu, Carles and Planes, Jordi},
  date = {2019-07},
  pages = {1--8},
  issn = {2161-4407},
  doi = {10.1109/IJCNN.2019.8852469},
  abstract = {Malware detection and classification is a challenging problem and an active area of research. Particular challenges include how to best treat and preprocess malicious executables in order to feed machine learning algorithms. Novel approaches in the literature treat an executable as a sequence of bytes or as a sequence of assembly language instructions. However, in those approaches the hierarchical structure of programs is not taken into consideration. An executable exhibits various levels of spatial correlation. Adjacent code instructions are correlated spatially but that is not necessarily the case. Function calls and jump commands transfer the control of the program to a different point in the instruction stream. Furthermore, these discontinuities are maintained when treating the binary as a sequence of byte values. In addition, functions might be arranged randomly if addresses are correctly reorganized. To address these issues we propose a Hierarchical Convolutional Network (HCN) for malware classification. It has two levels of convolutional blocks applied at the mnemonic-level and at the function-level, enabling us to extract n-gram like features from both levels when constructing the malware representation. We validate our HCN method on the dataset released for the Microsoft Malware Classification Challenge, outperforming almost every deep learning method in the literature.},
  eventtitle = {2019 {{International Joint Conference}} on {{Neural Networks}} ({{IJCNN}})},
  keywords = {Convolutional codes,Deep learning,Deep Learning,Entropy,Feature extraction,Hierarchical Convolutional Neural Network,Machine Learning,Malware,Malware Classification,Task analysis},
  file = {/Users/asworski/Documents/Zotero/storage/XMFURFNG/Gibert et al. - 2019 - A Hierarchical Convolutional Neural Network for Ma.pdf;/Users/asworski/Documents/Zotero/storage/NMZUVV4J/references.html}
}

@article{guo_file_2020,
  title = {File {{Entropy Signal Analysis Combined With Wavelet Decomposition}} for {{Malware Classification}}},
  author = {Guo, Hui and Huang, Shuguang and Huang, Cheng and Pan, Zulie and Zhang, Min and Shi, Fan},
  date = {2020},
  journaltitle = {IEEE Access},
  shortjournal = {IEEE Access},
  volume = {8},
  pages = {158961--158971},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2020.3020330},
  url = {https://ieeexplore.ieee.org/document/9180349/},
  urldate = {2022-07-05},
  abstract = {With the rapid development of the Internet, malware variants have increased exponentially, which poses a key threat to cyber security. Persistent efforts have been made to classify malware variants, but there are still many challenges, including the incapacity to deal with various malware variants belonging to similar families, the problem of time and resource consuming, etc. This paper proposes a novel method, called Malware Entropy Sequences Reflect the Family (MESRF), to improve the classification of malware based on the entropy sequences features. In prior research, entropy demonstrated good performance in many areas. First, the global features of the signals were extracted from the entropy sequences by some statistical methods. Next, some local features (i.e. structural entropy features) are extracted based on the discrete wavelet decomposition algorithm and vectorized by the Bag-of-words model, endowing it the high accuracy of malware classification. To evaluate our method, we conducted numerous experiments on the malware datasets with more than 20,000 samples. Through experiments, MESRF showed superiority comparing with other malware classification models, and the accuracy and ROC of the method even could reach 99.83\% and 99.98\% respectively on the malimg dataset.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/F658DNL8/Guo et al. - 2020 - File Entropy Signal Analysis Combined With Wavelet.pdf}
}

@article{harold_evaluation_nodate,
  title = {An {{Evaluation}} of {{Convolutional Neural Networks}}’ {{Effectiveness}} in {{Malware Classification}}},
  author = {Harold, Aaron},
  pages = {43},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/53VJSVAC/Harold - An Evaluation of Convolutional Neural Networks’ Ef.pdf}
}

@book{harper_gray_2018,
  title = {Gray {{Hat Hacking The Ethical Hacker}}'s {{Handbook}}, {{Fifth Edition}}},
  shorttitle = {Gray Hat Hacking},
  author = {Harper, Allen},
  date = {2018},
  edition = {Fifth edition},
  volume = {5th},
  publisher = {{McGraw-Hill Education}},
  location = {{New York}},
  isbn = {978-1-260-10841-5},
  keywords = {Computer security,Hackers,Handbooks; manuals; etc,Penetration testing (Computer security)}
}

@book{harper_gray_2022,
  title = {Gray {{Hat Hacking}}: {{The Ethical Hacker}}'s {{Handbook}}, {{Sixth Edition}}},
  author = {Harper, Allen and Linn, Ryan and Sims, Stephen and Baucom, Michael and Tejeda, Huascar and Fernandez, Daniel and Frost, Moses},
  date = {2022},
  volume = {6th},
  publisher = {{McGraw-Hill Education}},
  location = {{New York}},
  url = {https://public.ebookcentral.proquest.com/choice/PublicFullRecord.aspx?p=6888446},
  urldate = {2022-05-21},
  isbn = {978-1-264-26895-5},
  langid = {english},
  annotation = {OCLC: 1299385198}
}

@article{hemalatha_efficient_2021,
  title = {An {{Efficient DenseNet-Based Deep Learning Model}} for {{Malware Detection}}},
  author = {Hemalatha, Jeyaprakash and Roseline, S. and Geetha, Subbiah and Kadry, Seifedine and Damaševičius, Robertas},
  date = {2021-03-15},
  journaltitle = {Entropy},
  shortjournal = {Entropy},
  volume = {23},
  number = {3},
  pages = {344},
  issn = {1099-4300},
  doi = {10.3390/e23030344},
  url = {https://www.mdpi.com/1099-4300/23/3/344},
  urldate = {2022-07-21},
  abstract = {Recently, there has been a huge rise in malware growth, which creates a significant security threat to organizations and individuals. Despite the incessant efforts of cybersecurity research to defend against malware threats, malware developers discover new ways to evade these defense techniques. Traditional static and dynamic analysis methods are ineffective in identifying new malware and pose high overhead in terms of memory and time. Typical machine learning approaches that train a classifier based on handcrafted features are also not sufficiently potent against these evasive techniques and require more efforts due to feature-engineering. Recent malware detectors indicate performance degradation due to class imbalance in malware datasets. To resolve these challenges, this work adopts a visualization-based method, where malware binaries are depicted as two-dimensional images and classified by a deep learning model. We propose an efficient malware detection system based on deep learning. The system uses a reweighted class-balanced loss function in the final classification layer of the DenseNet model to achieve significant performance improvements in classifying malware by handling imbalanced data issues. Comprehensive experiments performed on four benchmark malware datasets show that the proposed approach can detect new malware samples with higher accuracy (98.23\% for the Malimg dataset, 98.46\% for the BIG 2015 dataset, 98.21\% for the MaleVis dataset, and 89.48\% for the unseen Malicia dataset) and reduced falsepositive rates when compared with conventional malware mitigation techniques while maintaining low computational time. The proposed malware detection solution is also reliable and effective against obfuscation attacks.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/HZP79SVY/Hemalatha et al. - 2021 - An Efficient DenseNet-Based Deep Learning Model fo.pdf}
}

@video{jiwei_liu_first_2015,
  title = {First Place Approach in {{Microsoft Malware Classification Challenge}} ({{BIG}} 2015)},
  editor = {{jiwei liu}},
  date = {2015-05-19},
  url = {https://www.youtube.com/watch?v=VLQTRlLGz5Y},
  urldate = {2022-07-29},
  editortype = {director}
}

@inproceedings{kim_convolutional_2014,
  title = {Convolutional {{Neural Networks}} for {{Sentence Classification}}},
  booktitle = {Proceedings of the 2014 {{Conference}} on {{Empirical Methods}} in {{Natural Language Processing}} ({{EMNLP}})},
  author = {Kim, Yoon},
  date = {2014-10},
  pages = {1746--1751},
  publisher = {{Association for Computational Linguistics}},
  location = {{Doha, Qatar}},
  doi = {10.3115/v1/D14-1181},
  url = {https://aclanthology.org/D14-1181},
  urldate = {2022-05-27},
  eventtitle = {{{EMNLP}} 2014},
  file = {/Users/asworski/Documents/Zotero/storage/HHZBIIHG/Kim - 2014 - Convolutional Neural Networks for Sentence Classif.pdf}
}

@article{kumar_dtmic_2022,
  title = {{{DTMIC}}: {{Deep}} Transfer Learning for Malware Image Classification},
  shorttitle = {{{DTMIC}}},
  author = {Kumar, Sanjeev and Janet, B.},
  date = {2022-02},
  journaltitle = {Journal of Information Security and Applications},
  shortjournal = {Journal of Information Security and Applications},
  volume = {64},
  pages = {103063},
  issn = {22142126},
  doi = {10.1016/j.jisa.2021.103063},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S2214212621002465},
  urldate = {2022-07-21},
  abstract = {In the ever-changing cyber threat landscape, evolving malware threats demand a new technique for their detection. This paper puts forward a strategy for distinguishing malware programs based on transfer learning procedures. The proposed method, known as DTMIC — deep transfer learning for malware image classification, leverages the capabilities of deep Convolutional Neural Network (CNN) architecture previously trained with ImageNet dataset ({$>$} 10 million images) for malware classification. Window’s portable executable files (PEs) are converted into grayscale images, with the perception that similar malware families fundamentally show the same characteristics when represented as visualized images. Grayscale images serve as input to the customized deep CNN architecture. Features extracted from the convolutional layers of the deep CNN model are flattened and fed into a fully connected dense layer. In addition, to avoid the overfitting problem that many CNN models face, a regularization technique called Early Stopping is employed to monitor the validation loss with configured parameters. The effectiveness and robustness of the model are evaluated on two benchmark datasets — the MalImg dataset (9339 malware samples of 25 families) and the Microsoft BIG dataset (10868 malware samples of 9 families). DTMIC achieved 98.92\% test accuracy for MalImg datasets and 93.19\% for Microsoft datasets. For comparative analysis, well-established CNN architectures such as VGG16, VGG19, ResNet50, and Google’s inceptionV3 are implemented, both as a feature extractor and a classifier. Experimental results reveal that the proposed DTMIC method outperforms the selected baseline models and is resilient to packed and encrypted malware. Moreover, this study validates the model’s efficacy on recent and real-world malware samples collected on Honeypots in the wild, with an accuracy of 96.43\%.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/ZXJN9AD6/Kumar and Janet - 2022 - DTMIC Deep transfer learning for malware image cl.pdf}
}

@article{kumar_learning_2019,
  title = {A Learning Model to Detect Maliciousness of Portable Executable Using Integrated Feature Set},
  author = {Kumar, Ajit and Kuppusamy, K.S. and Aghila, G.},
  date = {2019-04},
  journaltitle = {Journal of King Saud University - Computer and Information Sciences},
  shortjournal = {Journal of King Saud University - Computer and Information Sciences},
  volume = {31},
  number = {2},
  pages = {252--265},
  issn = {13191578},
  doi = {10.1016/j.jksuci.2017.01.003},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S1319157817300149},
  urldate = {2022-08-09},
  abstract = {Malware is one of the top most obstructions for expansion and growth of digital acceptance among the users. Both enterprises and common users are struggling to get protected from the malware in the cyberspace, which emphasizes the importance of developing efficient methods of malware detection. In this work, we propose a machine learning based solution to classify a sample as benign or malware with high accuracy and low computation overhead. An integrated feature set has been amalgamated as a combination of portable executable header fields raw value and derived values. Various machine-learning algorithms such as Decision Tree, Random Forest, kNN, Logistic Regression, Linear Discriminant Analysis and Naive Bayes were adopted in the classification of malware. Using existing raw feature set and the proposed integrated feature set we compared performance of each classifier. The empirical evidence indicates 98.4\% classification accuracy in the 10-fold cross validation for the proposed integrated feature set. In the experiments conducted on the novel test data set the accuracy was observed as 89.23\% for the integrated feature set which is 15\% improvement on accuracy achieved with raw-feature set alone. Classification accuracy with only top N features (N = 5, 10, 15, 20, 25) are also experimented and it was observed that with only top 15 features 98\% and 97\% accuracy can be achieved on integrated and raw feature respectively.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/JI5QWJLY/Kumar et al. - 2019 - A learning model to detect maliciousness of portab.pdf}
}

@article{kwon_malware_2020,
  title = {Malware {{Classification Using Simhash Encoding}} and {{PCA}} ({{MCSP}})},
  author = {Kwon, Young-Man and An, Jae-Ju and Lim, Myung-Jae and Cho, Seongsoo and Gal, Won-Mo},
  date = {2020-05-19},
  journaltitle = {Symmetry},
  shortjournal = {Symmetry},
  volume = {12},
  number = {5},
  pages = {830},
  issn = {2073-8994},
  doi = {10.3390/sym12050830},
  url = {https://www.mdpi.com/2073-8994/12/5/830},
  urldate = {2022-07-21},
  abstract = {Malware is any malicious program that can attack the security of other computer systems for various purposes. The threat of malware has significantly increased in recent years. To protect our computer systems, we need to analyze an executable file to decide whether it is malicious or not. In this paper, we propose two malware classification methods: malware classification using Simhash and PCA (MCSP), and malware classification using Simhash and linear transform (MCSLT). PCA uses the symmetrical covariance matrix. The former method combines Simhash encoding and PCA, and the latter combines Simhash encoding and linear transform layer. To verify the performance of our methods, we compared them with basic malware classification using Simhash and CNN (MCSC) using tanh and relu activation. We used a highly imbalanced dataset with 10,736 samples. As a result, our MCSP method showed the best performance with a maximum accuracy of 98.74\% and an average accuracy of 98.59\%. It showed an average F1 score of 99.2\%. In addition, the MCSLT method showed better performance than MCSC in accuracy and F1 score.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/YE489F3W/Kwon et al. - 2020 - Malware Classification Using Simhash Encoding and .pdf}
}

@article{li_malware_2022,
  title = {Malware Classification Based on Double Byte Feature Encoding},
  author = {Li, Lin and Ding, Ying and Li, Bo and Qiao, Mengqing and Ye, Biao},
  date = {2022-01-01},
  journaltitle = {Alexandria Engineering Journal},
  shortjournal = {Alexandria Engineering Journal},
  volume = {61},
  number = {1},
  pages = {91--99},
  issn = {1110-0168},
  doi = {10.1016/j.aej.2021.04.076},
  url = {https://www.sciencedirect.com/science/article/pii/S1110016821003185},
  urldate = {2022-05-18},
  abstract = {Many researchers analyze malware through static analysis and dynamic analysis technology, and combine it with excellent deep learning algorithm, which has achieved good results in malware classification. However, many researches only use the. ASM file generated by decompiler or. Bytes file represented by hexadecimal for feature extraction. This paper fully integrates the features of these two files, and uses word frequency and two deep learning algorithms to extract 184 opcode features and 16 probability features from ASM file and section file of Kaggle dataset respectively. Then, double byte feature coding method is used to fuse the features of the two files. Finally, convolution neural network is used to classify the fused samples. The experimental results show that the accuracy is 98.68\% and the logarithm loss is 0.022.},
  langid = {english},
  keywords = {Convolutional Neural Network,Double Byte Feature Encoding,Feature Selection,Malware Classification},
  file = {/Users/asworski/Documents/Zotero/storage/QK69NRYH/Li et al. - 2022 - Malware classification based on double byte featur.pdf;/Users/asworski/Documents/Zotero/storage/2T4JV8LX/S1110016821003185.html}
}

@article{lin_efficient_2022,
  title = {Efficient {{Malware Classification}} by {{Binary Sequences}} with {{One-Dimensional Convolutional Neural Networks}}},
  author = {Lin, Wei-Cheng and Yeh, Yi-Ren},
  date = {2022-02-16},
  journaltitle = {Mathematics},
  shortjournal = {Mathematics},
  volume = {10},
  number = {4},
  pages = {608},
  issn = {2227-7390},
  doi = {10.3390/math10040608},
  url = {https://www.mdpi.com/2227-7390/10/4/608},
  urldate = {2022-05-23},
  abstract = {The rapid increase of malware attacks has become one of the main threats to computer security. Finding the best way to detect malware has become a critical task in cybersecurity. Previous work shows that machine learning approaches could be a solution to address this problem. Many proposed methods convert malware executables into grayscale images and apply convolutional neural networks (CNNs) for malware classification. However, converting malware executables into images could twist the one-dimensional structure of binary codes. To address this problem, we explore the bit and byte-level sequences from malware executables and propose efficient onedimensional (1D) CNNs for the malware classification. Our experiments evaluate our proposed 1D CNN models with two benchmark datasets. Our proposed 1D CNN models achieve better performance from the experimental results than the existing 2D CNNs malware classification models by providing smaller resizing bit/byte-level sequences with less computational cost.},
  langid = {english},
  keywords = {1D Model},
  file = {/Users/asworski/Documents/Zotero/storage/2R8J9SKA/Lin and Yeh - 2022 - Efficient Malware Classification by Binary Sequenc.pdf}
}

@inproceedings{lucas_malware_2021,
  title = {Malware {{Makeover}}: {{Breaking ML-based Static Analysis}} by {{Modifying Executable Bytes}}},
  shorttitle = {Malware {{Makeover}}},
  booktitle = {Proceedings of the 2021 {{ACM Asia Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Lucas, Keane and Sharif, Mahmood and Bauer, Lujo and Reiter, Michael K. and Shintre, Saurabh},
  date = {2021-05-24},
  pages = {744--758},
  publisher = {{ACM}},
  location = {{Virtual Event Hong Kong}},
  doi = {10.1145/3433210.3453086},
  url = {https://dl.acm.org/doi/10.1145/3433210.3453086},
  urldate = {2022-07-21},
  abstract = {Motivated by the transformative impact of deep neural networks (DNNs) in various domains, researchers and anti-virus vendors have proposed DNNs for malware detection from raw bytes that do not require manual feature engineering. In this work, we propose an attack that interweaves binary-diversification techniques and optimization frameworks to mislead such DNNs while preserving the functionality of binaries. Unlike prior attacks, ours manipulates instructions that are a functional part of the binary, which makes it particularly challenging to defend against. We evaluated our attack against three DNNs in white- and black-box settings, and found that it often achieved success rates near 100\%. Moreover, we found that our attack can fool some commercial anti-viruses, in certain cases with a success rate of 85\%. We explored several defenses, both new and old, and identified some that can foil over 80\% of our evasion attempts. However, these defenses may still be susceptible to evasion by attacks, and so we advocate for augmenting malware-detection systems with methods that do not rely on machine learning.},
  eventtitle = {{{ASIA CCS}} '21: {{ACM Asia Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-8287-8},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/BHNQLFDQ/Lucas et al. - 2021 - Malware Makeover Breaking ML-based Static Analysi.pdf}
}

@online{mgilson_answer_2016,
  title = {Answer to "{{Zero}} Pad Numpy Array"},
  author = {{mgilson}},
  date = {2016-07-04},
  url = {https://stackoverflow.com/a/38191927},
  urldate = {2022-06-01},
  organization = {{Stack Overflow}},
  file = {/Users/asworski/Documents/Zotero/storage/XBUK5AP9/zero-pad-numpy-array.html}
}

@inproceedings{nataraj_malware_2011,
  title = {Malware Images: Visualization and Automatic Classification},
  shorttitle = {Malware Images},
  booktitle = {Proceedings of the 8th {{International Symposium}} on {{Visualization}} for {{Cyber Security}} - {{VizSec}} '11},
  author = {Nataraj, L. and Karthikeyan, S. and Jacob, G. and Manjunath, B. S.},
  date = {2011},
  pages = {1--7},
  publisher = {{ACM Press}},
  location = {{Pittsburgh, Pennsylvania}},
  doi = {10.1145/2016904.2016908},
  url = {http://dl.acm.org/citation.cfm?doid=2016904.2016908},
  urldate = {2022-06-09},
  eventtitle = {The 8th {{International Symposium}}},
  isbn = {978-1-4503-0679-9},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/6WLIC69P/Nataraj et al. - 2011 - Malware images visualization and automatic classi.pdf}
}

@online{noauthor_bu_nodate,
  title = {{{BU ECE Students}} Receive {{Best Paper Award}} at the {{ASIA Conference}} on {{Computer}} and {{Communication Security}} 2018 | {{College}} of {{Engineering}}},
  url = {https://www.bu.edu/eng/2018/08/14/best-paper-award-asia-conference-on-computer-and-communication-security-2018/},
  urldate = {2022-08-09},
  file = {/Users/asworski/Documents/Zotero/storage/IU5C2P66/best-paper-award-asia-conference-on-computer-and-communication-security-2018.html}
}

@online{noauthor_malware_2022,
  title = {Malware {{Statistics}} \& {{Trends Report}} | {{AV-TEST}}},
  date = {2022},
  url = {https://www.av-test.org/en/statistics/malware/},
  urldate = {2022-07-09},
  abstract = {Provides visualizations of malware statistics that have happened in the last year, 2 years, 5 years, and 10 year time period.},
  langid = {american},
  file = {/Users/asworski/Documents/Zotero/storage/E93RCHQR/malware.html}
}

@online{noauthor_tfkeras_nodate,
  title = {Tf.Keras Cannot Weight Classes When Using Multiple Outputs · {{Issue}} \#41448 · Tensorflow/Tensorflow},
  url = {https://github.com/tensorflow/tensorflow/issues/41448},
  urldate = {2022-07-10},
  abstract = {This post is a mirror of keras-team/keras\#11735, showing the need to handle class weight for multiple outputs. Version 2.2.0 used. This is a minimal source code, by @GalAvineri, to reproduce the is...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/asworski/Documents/Zotero/storage/VF36WUUA/41448.html}
}

@online{noauthor_tfkeraslayersbatchnormalization_nodate,
  title = {Tf.Keras.Layers.{{BatchNormalization}}() May Not Work in Tf=2.0 and Eager Model Is Disable · {{Issue}} \#35107 · Tensorflow/Tensorflow},
  url = {https://github.com/tensorflow/tensorflow/issues/35107},
  urldate = {2022-06-28},
  abstract = {System information Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04 in...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/asworski/Documents/Zotero/storage/H2BKVTIM/35107.html}
}

@online{paulmcg_answer_2016,
  title = {Answer to "How to Parse {{ASM}} File and Get Opcode"},
  author = {PaulMcG},
  date = {2016-05-18},
  url = {https://stackoverflow.com/a/37301539},
  urldate = {2022-05-30},
  organization = {{Stack Overflow}},
  file = {/Users/asworski/Documents/Zotero/storage/59JFH5PK/how-to-parse-asm-file-and-get-opcode.html}
}

@article{pinhero_malware_2021,
  title = {Malware Detection Employed by Visualization and Deep Neural Network},
  author = {Pinhero, Anson and M l, Anupama and P, Vinod and Visaggio, C. A. and N, Aneesh and S, Abhijith and S, AnanthaKrishnan},
  date = {2021-06-01},
  journaltitle = {Computers \& Security},
  shortjournal = {Computers \& Security},
  volume = {105},
  pages = {102247},
  issn = {0167-4048},
  doi = {10.1016/j.cose.2021.102247},
  url = {https://www.sciencedirect.com/science/article/pii/S0167404821000717},
  urldate = {2022-05-23},
  abstract = {With the fast growth of malware’s volume circulating in the wild, to obtain a timely and correct classification is increasingly difficult. Traditional approaches to automatic classification suffer from some limitations. The first one concerns the feature extraction: static approaches are hindered by code obfuscation techniques, while dynamic approaches are time consuming and evasion techniques often impede the correct execution of the code. The second limitation regards the building of the prediction models: the adequateness of a training dataset may degrade over time or can not be sufficient for some malware families or instances. With this paper we investigate the effectiveness of a new approach that uses malware visualization, for overcoming the problems related to the features selection and extraction, along with deep learning classification, whose performances are less sensitive to a small dataset than machine learning. The experiments carried out on twelve different neural network architectures and with a dataset of 20,199 malware, demonstrate that the proposed approach is successful as produced an F-measure of 99.97\%.},
  langid = {english},
  keywords = {2D Model,Deep learning,Entropy Model,Machine learning,Malware classification,Malware detection,Malware visualization},
  file = {/Users/asworski/Documents/Zotero/storage/PAHDHBF7/Pinhero et al. - 2021 - Malware detection employed by visualization and de.pdf;/Users/asworski/Documents/Zotero/storage/CGQXFQD9/S0167404821000717.html}
}

@book{regalado_gray_2015,
  title = {Gray {{Hat Hacking The Ethical Hacker}}'s {{Handbook}}, {{Fourth Edition}}, 4th {{Edition}}},
  author = {Regalado, Daniel and Harris, Shon and Harper, Allen and Eagle, Chris and Ness, Jonathan and Spasojevic, Branko and Linn, Ryan and Sims, Stephen and {O'Reilly for Higher Education (Firm)}},
  date = {2015},
  volume = {4th},
  abstract = {Cutting-edge techniques for finding and fixing critical security flaws Fortify your network and avert digital catastrophe with proven strategies from a team of security experts. Completely updated and featuring 12 new chapters, Gray Hat Hacking: The Ethical Hacker's Handbook, Fourth Edition explains the enemy's current weapons, skills, and tactics and offers field-tested remedies, case studies, and ready-to-deploy testing labs. Find out how hackers gain access, overtake network devices, script and inject malicious code, and plunder Web applications and browsers. Android-based exploits, reverse engineering techniques, and cyber law are thoroughly covered in this state-of-the-art resource. Build and launch spoofing exploits with Ettercap and Evilgrade Induce error conditions and crash software using fuzzers Hack Cisco routers, switches, and network hardware Use advanced reverse engineering to exploit Windows and Linux software Bypass Windows Access Control and memory protection schemes Scan for flaws in Web applications using Fiddler and the x5 plugin Learn the use-after-free technique used in recent zero days Bypass Web authentication via MySQL type conversion and MD5 injection attacks Inject your shellcode into a browser's memory using the latest Heap Spray techniques Hijack Web browsers with Metasploit and the BeEF Injection Framework Neutralize ransomware before it takes control of your desktop Dissect Android malware with JEB and DAD decompilers Find one-day vulnerabilities with binary diffing.},
  langid = {english},
  annotation = {OCLC: 1103568881}
}

@misc{ronen_microsoft_2018,
  title = {Microsoft {{Malware Classification Challenge}}},
  author = {Ronen, Royi and Radu, Marian and Feuerstein, Corina and Yom-Tov, Elad and Ahmadi, Mansour},
  date = {2018-02-22},
  number = {arXiv:1802.10135},
  eprint = {1802.10135},
  eprinttype = {arxiv},
  primaryclass = {cs},
  publisher = {{arXiv}},
  url = {http://arxiv.org/abs/1802.10135},
  urldate = {2022-05-26},
  abstract = {The Microsoft Malware Classification Challenge was announced in 2015 along with a publication of a huge dataset of nearly 0.5 terabytes, consisting of disassembly and bytecode of more than 20K malware samples. Apart from serving in the Kaggle competition, the dataset has become a standard benchmark for research on modeling malware behaviour. To date, the dataset has been cited in more than 50 research papers. Here we provide a high-level comparison of the publications citing the dataset. The comparison simplifies finding potential research directions in this field and future performance evaluation of the dataset.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/Users/asworski/Documents/Zotero/storage/PJ8YBY2A/Ronen et al. - 2018 - Microsoft Malware Classification Challenge.pdf;/Users/asworski/Documents/Zotero/storage/FVSRX92K/1802.html}
}

@online{shrivastava_handling_2020,
  title = {Handling {{Class Imbalance}} by {{Introducing Sample Weighting}} in the {{Loss Function}}},
  author = {Shrivastava, Ishan},
  date = {2020-12-17T00:18:08},
  url = {https://medium.com/gumgum-tech/handling-class-imbalance-by-introducing-sample-weighting-in-the-loss-function-3bdebd8203b4},
  urldate = {2022-06-05},
  abstract = {“Nobody is Perfect” This quote not just applies to us humans but also the data that surrounds us. Any data science practitioner needs to…},
  langid = {english},
  organization = {{GumGum Tech Blog}},
  file = {/Users/asworski/Documents/Zotero/storage/HQ32D3XI/handling-class-imbalance-by-introducing-sample-weighting-in-the-loss-function-3bdebd8203b4.html}
}

@book{sikorski_practical_2012,
  title = {Practical Malware Analysis: The Hands-on Guide to Dissecting Malicious Software},
  shorttitle = {Practical Malware Analysis},
  author = {Sikorski, Michael and Honig, Andrew},
  date = {2012},
  publisher = {{No Starch Press}},
  location = {{San Francisco}},
  isbn = {978-1-59327-290-6},
  pagetotal = {766},
  keywords = {Computer security,Computer viruses,Debugging in computer science,Malware (Computer software)}
}

@unpublished{smith_dont_2018,
  title = {Don't {{Decay}} the {{Learning Rate}}, {{Increase}} the {{Batch Size}}},
  author = {Smith, Samuel L. and Kindermans, Pieter-Jan and Ying, Chris and Le, Quoc V.},
  date = {2018-02-23},
  number = {arXiv:1711.00489},
  eprint = {1711.00489},
  eprinttype = {arxiv},
  primaryclass = {cs, stat},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.1711.00489},
  url = {http://arxiv.org/abs/1711.00489},
  urldate = {2022-06-13},
  abstract = {It is common practice to decay the learning rate. Here we show one can usually obtain the same learning curve on both training and test sets by instead increasing the batch size during training. This procedure is successful for stochastic gradient descent (SGD), SGD with momentum, Nesterov momentum, and Adam. It reaches equivalent test accuracies after the same number of training epochs, but with fewer parameter updates, leading to greater parallelism and shorter training times. We can further reduce the number of parameter updates by increasing the learning rate \$\textbackslash epsilon\$ and scaling the batch size \$B \textbackslash propto \textbackslash epsilon\$. Finally, one can increase the momentum coefficient \$m\$ and scale \$B \textbackslash propto 1/(1-m)\$, although this tends to slightly reduce the test accuracy. Crucially, our techniques allow us to repurpose existing training schedules for large batch training with no hyper-parameter tuning. We train ResNet-50 on ImageNet to \$76.1\textbackslash\%\$ validation accuracy in under 30 minutes.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computer Vision and Pattern Recognition,Computer Science - Distributed; Parallel; and Cluster Computing,Computer Science - Machine Learning,Statistics - Machine Learning},
  file = {/Users/asworski/Documents/Zotero/storage/AZDD8AS2/Smith et al. - 2018 - Don't Decay the Learning Rate, Increase the Batch .pdf;/Users/asworski/Documents/Zotero/storage/G2P5YE3B/1711.html}
}

@article{smith_mind_2017,
  title = {Mind the {{Gap}}: {{On Bridging}} the {{Semantic Gap}} between {{Machine Learning}} and {{Malware Analysis}}},
  author = {Smith, Michael R and Johnson, Nicholas T and Ingram, Joe B and Carbajal, Armida J and Haus, Bridget I and Domschot, Eva and Ramyaa, Ramyaa and Lamb, Christopher C and Verzi, Stephen J and Kegelmeyer, W Philip},
  date = {2017},
  journaltitle = {Mind the Gap},
  pages = {12},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/NSCN4JHM/Smith et al. - 2017 - Mind the Gap On Bridging the Semantic Gap between.pdf}
}

@incollection{sun_calculation_2019,
  title = {Calculation of {{Network Security Index Based}} on {{Convolution Neural Networks}}},
  booktitle = {Artificial {{Intelligence}} and {{Security}}},
  author = {Yang, Hang and Jia, Yan and Han, Wei-Hong and Nie, Yuan-Ping and Li, Shu-Dong and Zhao, Xiao-Juan},
  editor = {Sun, Xingming and Pan, Zhaoqing and Bertino, Elisa},
  date = {2019},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {11634},
  pages = {530--540},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-24271-8_47},
  url = {http://link.springer.com/10.1007/978-3-030-24271-8_47},
  urldate = {2022-05-18},
  abstract = {The Network Security Index System is an important means for network security situation assessment (NSSA). Through index selection, system construction and numerical calculation, it helps network managers obtain macro perspectives on networks. However, the traditional situation assessment methods based on an index system have always had some defects, such as excessive reliance on manual intervention, high deviation, and limited scope of application. Based on summing up the existing research results, this paper combines the advantages of adaptability, effective feature extraction and complexity reduction of convolutional neural networks (CNN). By constructing the convolutional kernels which are suitable for the characteristics of an index system we extract the potential correlation features; by using a pooling technique we shrink the model scale quickly and highlight the main features; by utilizing the deep network structure of multiple hidden layers, we implement a method of calculating network security indexes based on CNNs. Finally, the feasibility and effectiveness of this method are verified by experiments and comparisons.},
  isbn = {978-3-030-24270-1 978-3-030-24271-8},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/YH5U38XC/Yang et al. - 2019 - Calculation of Network Security Index Based on Con.pdf}
}

@article{sun_categorizing_2020,
  title = {Categorizing {{Malware}} via {{A Word2Vec-based Temporal Convolutional Network Scheme}}},
  author = {Sun, Jiankun and Luo, Xiong and Gao, Honghao and Wang, Weiping and Gao, Yang and Yang, Xi},
  date = {2020-12},
  journaltitle = {Journal of Cloud Computing},
  shortjournal = {J Cloud Comp},
  volume = {9},
  number = {1},
  pages = {53},
  issn = {2192-113X},
  doi = {10.1186/s13677-020-00200-y},
  url = {https://journalofcloudcomputing.springeropen.com/articles/10.1186/s13677-020-00200-y},
  urldate = {2022-07-21},
  abstract = {As edge computing paradigm achieves great popularity in recent years, there remain some technical challenges that must be addressed to guarantee smart device security in Internet of Things (IoT) environment. Generally, smart devices transmit individual data across the IoT for various purposes nowadays, and it will cause losses and impose a huge threat to users since malware may steal and damage these data. To improve malware detection performance on IoT smart devices, we conduct a malware categorization analysis based on the Kaggle competition of Microsoft Malware Classification Challenge (BIG 2015) dataset in this article. Practically speaking, motivated by temporal convolutional network (TCN) structure, we propose a malware categorization scheme mainly using Word2Vec pre-trained model. Considering that the popular one-hot encoding converts input names from malicious files to high-dimensional vectors since each name is represented as one dimension in one-hot vector space, more compact vectors with fewer dimensions are obtained through the use of Word2Vec pre-training strategy, and then it can lead to fewer parameters and stronger malware feature representation. Moreover, compared with long short-term memory (LSTM), TCN demonstrates better performance with longer effective memory and faster training speed in sequence modeling tasks. The experimental comparisons on this malware dataset reveal better categorization performance with less memory usage and training time. Especially, through the performance comparison between our scheme and the state-of-the-art Word2Vec-based LSTM approach, our scheme shows approximately 1.3\% higher predicted accuracy than the latter on this malware categorization task. Additionally, it also demonstrates that our scheme reduces about 90 thousand parameters and more than 1 hour on the model training time in this comparison.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/3KRR9BAP/Sun et al. - 2020 - Categorizing Malware via A Word2Vec-based Temporal.pdf}
}

@article{tian_bindeep_2021,
  title = {{{BinDeep}}: {{A}} Deep Learning Approach to Binary Code Similarity Detection},
  shorttitle = {{{BinDeep}}},
  author = {Tian, Donghai and Jia, Xiaoqi and Ma, Rui and Liu, Shuke and Liu, Wenjing and Hu, Changzhen},
  date = {2021-04-15},
  journaltitle = {Expert Systems with Applications},
  shortjournal = {Expert Systems with Applications},
  volume = {168},
  pages = {114348},
  issn = {0957-4174},
  doi = {10.1016/j.eswa.2020.114348},
  url = {https://www.sciencedirect.com/science/article/pii/S0957417420310332},
  urldate = {2022-05-23},
  abstract = {Binary code similarity detection (BCSD) plays an important role in malware analysis and vulnerability discovery. Existing methods mainly rely on the expert’s knowledge for the BCSD, which may not be reliable in some cases. More importantly, the detection accuracy (or performance) of these methods are not so satisfied. To address these issues, we propose BinDeep, a deep learning approach for binary code similarity detection. This method firstly extracts the instruction sequence from the binary function and then uses the instruction embedding model to vectorize the instruction features. Next, BinDeep applies a Recurrent Neural Network (RNN) deep learning model to identify the specific types of two functions for later comparison. According to the type information, BinDeep selects the corresponding deep learning model for similarity comparison. Specifically, BinDeep uses the Siamese neural networks, which combine the LSTM and CNN to measure the similarities of two target functions. Different from the traditional deep learning model, our hybrid model takes advantage of the CNN spatial structure learning and the LSTM sequence learning. The evaluation shows that our approach can achieve good BCSD between cross-architecture, cross-compiler, cross-optimization, and cross-version binary code.},
  langid = {english},
  keywords = {Binary code,CNN,Deep learning,LSTM,Siamese neural network,Similarity comparison},
  file = {/Users/asworski/Documents/Zotero/storage/DT5WPLAT/Tian et al. - 2021 - BinDeep A deep learning approach to binary code s.pdf;/Users/asworski/Documents/Zotero/storage/KSFBFLGK/S0957417420310332.html}
}

@article{wagner_survey_2015,
  title = {A {{Survey}} of {{Visualization Systems}} for {{Malware Analysis}}},
  author = {Wagner, M and Fischer, F and Luh, R and Haberson, A and Rind, A and Keim, D A and Aigner, W},
  date = {2015},
  pages = {21},
  abstract = {Due to the increasing threat from malicious software (malware), monitoring of vulnerable systems is becoming increasingly important. The need to log and analyze activity encompasses networks, individual computers, as well as mobile devices. While there are various automatic approaches and techniques available to detect, identify, or capture malware, the actual analysis of the ever-increasing number of suspicious samples is a time-consuming process for malware analysts. The use of visualization and highly interactive visual analytics systems can help to support this analysis process with respect to investigation, comparison, and summarization of malware samples. Currently, there is no survey available that reviews available visualization systems supporting this important and emerging field. We provide a systematic overview and categorization of malware visualization systems from the perspective of visual analytics. Additionally, we identify and evaluate data providers and commercial tools that produce meaningful input data for the reviewed malware visualization systems. This helps to reveal data types that are currently underrepresented, enabling new research opportunities in the visualization community.},
  langid = {english},
  file = {/Users/asworski/Documents/Zotero/storage/M36SXBFV/Wagner et al. - A Survey of Visualization Systems for Malware Anal.pdf}
}

@online{wells_upsampling_nodate,
  title = {Upsampling and {{Downsampling Imbalanced Data}} in {{Python}}},
  author = {Wells, Ryan},
  url = {https://wellsr.com/python/upsampling-and-downsampling-imbalanced-data-in-python/},
  urldate = {2022-06-05},
  abstract = {Handling imbalanced data in Python is essential. In this tutorial, we'll show you how to balance datasets using two upsampling and one downsampling technique.},
  organization = {{wellsr.com}},
  file = {/Users/asworski/Documents/Zotero/storage/YIUIJARL/upsampling-and-downsampling-imbalanced-data-in-python.html}
}

@online{ybdesire_how_2016,
  type = {Forum post},
  title = {How to Parse {{ASM}} File and Get Opcode},
  author = {{ybdesire}},
  date = {2016-05-18},
  url = {https://stackoverflow.com/q/37301142},
  urldate = {2022-05-30},
  organization = {{Stack Overflow}},
  file = {/Users/asworski/Documents/Zotero/storage/Z6HCWIDT/how-to-parse-asm-file-and-get-opcode.html}
}

@article{yuan_iot_2022,
  title = {{{IoT Malware Classification Based}} on {{Lightweight Convolutional Neural Networks}}},
  author = {Yuan, Baoguo and Wang, Junfeng and Wu, Peng and Qing, Xianguo},
  date = {2022-03},
  journaltitle = {IEEE Internet of Things Journal},
  volume = {9},
  number = {5},
  pages = {3770--3783},
  issn = {2327-4662},
  doi = {10.1109/JIOT.2021.3100063},
  abstract = {Internet of Things (IoT) is hard to deploy adequate security defenses due to the diversity of architectures as well as the limited computing and storage capabilities, which makes it more vulnerable to malware. With the massive deployment of IoT devices, how to accurately identify and classify the malware variants is crucial to IoT security. However, existing methods of IoT malware classification generally support specific platform or require complex models to achieve higher accuracies. To solve these problems, this article proposes an IoT malware classification method based on lightweight convolutional neural networks (LCNNs). First, the malware binaries are converted into multidimensional Markov images. Then, the LCNN is designed with two new operations, depthwise convolution and channel shuffle, for malware images classification. Compared with other deep learning-based methods such as VGG16, the designed LCNN can greatly reduce trainable parameters while maintaining accuracy. The generated model of LCNN is only about 1 MB, while that of VGG16 is 552.57 MB. The average accuracies of the proposed method are higher than that of gray images on multiple IoT malware data sets, all of which are over 95\%. Compared with the state-of-the-art low-level features-based methods, the average accuracy of the proposed method is 99.356\% on the Microsoft data set even if the model is tiny. The results show that the proposed method is not only suitable for IoT environments but also has high accuracy.},
  eventtitle = {{{IEEE Internet}} of {{Things Journal}}},
  keywords = {Computer architecture,Deep learning,Feature extraction,Internet of Things,Internet of Things (IoT) malware,IoT security,lightweight CNN,Malware,malware classification,Markov processes,multidimensional Markov image,Security},
  file = {/Users/asworski/Documents/Zotero/storage/NWF9ZWV7/Yuan et al. - 2022 - IoT Malware Classification Based on Lightweight Co.pdf;/Users/asworski/Documents/Zotero/storage/4FFAJQGN/9496689.html}
}


